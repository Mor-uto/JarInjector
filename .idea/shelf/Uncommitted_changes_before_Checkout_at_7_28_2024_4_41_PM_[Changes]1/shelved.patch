Index: src/main/java/me/moruto/JarInjector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package me.moruto;\r\n\r\nimport org.objectweb.asm.Opcodes;\r\nimport org.objectweb.asm.tree.*;\r\n\r\nimport java.util.List;\r\n\r\npublic class JarInjector implements Opcodes {\r\n    public static void inject(String mainClass, String mainMethod, List<ClassNode> classes) {\r\n        MethodNode mainMethodNode = getMainMethod(mainClass, mainMethod, classes);\r\n        if (mainMethodNode == null) {\r\n            GUI.log(\"Main method not found in the specified class. \" + mainClass);\r\n            return;\r\n        }\r\n\r\n        classes.add(createInjectedClass());\r\n\r\n        InsnList injectionInstructions = new InsnList();\r\n        injectionInstructions.add(new TypeInsnNode(NEW, mainClass));\r\n        injectionInstructions.add(new InsnNode(DUP));\r\n        injectionInstructions.add(new MethodInsnNode(INVOKESPECIAL, mainClass, \"<init>\", \"()V\", false));\r\n\r\n        mainMethodNode.instructions.insertBefore(mainMethodNode.instructions.getFirst(), injectionInstructions);\r\n\r\n        GUI.log(\"Injection successful!\");\r\n    }\r\n\r\n    private static MethodNode getMainMethod(String mainClass, String mainMethod, List<ClassNode> classes) {\r\n        for (ClassNode classNode : classes) {\r\n            if (classNode.name.equalsIgnoreCase(mainClass)) {\r\n                for (MethodNode methodNode : classNode.methods) {\r\n                    if (methodNode.name.equalsIgnoreCase(mainMethod)) {\r\n                        return methodNode;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private static ClassNode createInjectedClass() {\r\n        ClassNode classNode = new ClassNode();\r\n        classNode.name = \"me/moruto/Injected\";\r\n        classNode.superName = \"java/lang/Object\";\r\n        classNode.version = V1_8;\r\n        classNode.access = ACC_PUBLIC;\r\n        classNode.methods.add(createConstructor());\r\n\r\n        return classNode;\r\n    }\r\n\r\n    private static MethodNode createConstructor() {\r\n        MethodNode constructor = new MethodNode(ACC_PUBLIC, \"<init>\", \"()V\", null, null);\r\n        constructor.visitCode();\r\n        constructor.visitVarInsn(ALOAD, 0);\r\n        constructor.visitMethodInsn(INVOKESPECIAL, \"java/lang/Object\", \"<init>\", \"()V\", false);\r\n        constructor.visitInsn(RETURN);\r\n        constructor.visitEnd();\r\n        return constructor;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/me/moruto/JarInjector.java b/src/main/java/me/moruto/JarInjector.java
--- a/src/main/java/me/moruto/JarInjector.java	
+++ b/src/main/java/me/moruto/JarInjector.java	
@@ -6,57 +6,32 @@
 import java.util.List;
 
 public class JarInjector implements Opcodes {
-    public static void inject(String mainClass, String mainMethod, List<ClassNode> classes) {
-        MethodNode mainMethodNode = getMainMethod(mainClass, mainMethod, classes);
+    public static void inject(String injectionMainClass, List<ClassNode> classes) {
+        MethodNode mainMethodNode = getMainMethod(classes);
         if (mainMethodNode == null) {
-            GUI.log("Main method not found in the specified class. " + mainClass);
+            GUI.log("Main method not found in the specified class. ");
             return;
         }
 
-        classes.add(createInjectedClass());
-
         InsnList injectionInstructions = new InsnList();
-        injectionInstructions.add(new TypeInsnNode(NEW, mainClass));
+        injectionInstructions.add(new TypeInsnNode(NEW, injectionMainClass));
         injectionInstructions.add(new InsnNode(DUP));
-        injectionInstructions.add(new MethodInsnNode(INVOKESPECIAL, mainClass, "<init>", "()V", false));
+        injectionInstructions.add(new MethodInsnNode(INVOKESPECIAL, injectionMainClass, "<init>", "()V", false));
 
         mainMethodNode.instructions.insertBefore(mainMethodNode.instructions.getFirst(), injectionInstructions);
 
         GUI.log("Injection successful!");
     }
 
-    private static MethodNode getMainMethod(String mainClass, String mainMethod, List<ClassNode> classes) {
+    private static MethodNode getMainMethod(List<ClassNode> classes) {
         for (ClassNode classNode : classes) {
-            if (classNode.name.equalsIgnoreCase(mainClass)) {
-                for (MethodNode methodNode : classNode.methods) {
-                    if (methodNode.name.equalsIgnoreCase(mainMethod)) {
-                        return methodNode;
-                    }
+            for (MethodNode methodNode : classNode.methods) {
+                if (methodNode.name.equalsIgnoreCase("main") && methodNode.desc.equals("([Ljava/lang/String;)V")) {
+                    return methodNode;
                 }
             }
         }
 
         return null;
     }
-
-    private static ClassNode createInjectedClass() {
-        ClassNode classNode = new ClassNode();
-        classNode.name = "me/moruto/Injected";
-        classNode.superName = "java/lang/Object";
-        classNode.version = V1_8;
-        classNode.access = ACC_PUBLIC;
-        classNode.methods.add(createConstructor());
-
-        return classNode;
-    }
-
-    private static MethodNode createConstructor() {
-        MethodNode constructor = new MethodNode(ACC_PUBLIC, "<init>", "()V", null, null);
-        constructor.visitCode();
-        constructor.visitVarInsn(ALOAD, 0);
-        constructor.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
-        constructor.visitInsn(RETURN);
-        constructor.visitEnd();
-        return constructor;
-    }
 }
Index: src/main/java/me/moruto/GUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package me.moruto;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.application.Platform;\r\nimport javafx.geometry.Insets;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.layout.HBox;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.FileChooser;\r\nimport javafx.stage.Stage;\r\nimport org.objectweb.asm.tree.ClassNode;\r\n\r\nimport java.io.File;\r\n\r\npublic class GUI extends Application {\r\n    private File inputFile;\r\n    private File outputFile;\r\n    private File fileToInject;\r\n    private TextField mainClassInput;\r\n    private TextField mainMethodInput;\r\n    private static TextArea consoleOutput;\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        primaryStage.setTitle(\"Jar Injector\");\r\n\r\n        Image icon = new Image(getClass().getResource(\"/icon.png\").toString());\r\n        primaryStage.getIcons().add(icon);\r\n\r\n        BorderPane borderPane = new BorderPane();\r\n\r\n        HBox topButtons = new HBox(10);\r\n        topButtons.setPadding(new Insets(10, 10, 10, 10));\r\n        topButtons.setAlignment(Pos.CENTER_LEFT);\r\n\r\n        Button settingsButton = new Button(\"Settings\");\r\n        Button injectButton = new Button(\"Inject\");\r\n\r\n        topButtons.getChildren().addAll(settingsButton, injectButton);\r\n        borderPane.setTop(topButtons);\r\n\r\n        GridPane settingsGrid = new GridPane();\r\n        settingsGrid.setPadding(new Insets(10, 10, 10, 10));\r\n        settingsGrid.setVgap(10);\r\n        settingsGrid.setHgap(10);\r\n\r\n        Label inputLabel = new Label(\"Input Path:\");\r\n        GridPane.setConstraints(inputLabel, 0, 0);\r\n\r\n        TextField inputPathField = new TextField();\r\n        inputPathField.setPromptText(\"Enter input path\");\r\n        GridPane.setConstraints(inputPathField, 1, 0);\r\n\r\n        Button inputPathButton = new Button(\"Select File\");\r\n        GridPane.setConstraints(inputPathButton, 2, 0);\r\n\r\n        Label outputLabel = new Label(\"Output Path:\");\r\n        GridPane.setConstraints(outputLabel, 0, 1);\r\n\r\n        TextField outputPathField = new TextField();\r\n        outputPathField.setPromptText(\"Enter output path\");\r\n        GridPane.setConstraints(outputPathField, 1, 1);\r\n\r\n        Button outputPathButton = new Button(\"Select File\");\r\n        GridPane.setConstraints(outputPathButton, 2, 1);\r\n\r\n        Label fileToInjectLabel = new Label(\"File to Inject:\");\r\n        GridPane.setConstraints(fileToInjectLabel, 0, 2);\r\n\r\n        TextField fileToInjectField = new TextField();\r\n        fileToInjectField.setPromptText(\"Enter file to inject\");\r\n        GridPane.setConstraints(fileToInjectField, 1, 2);\r\n\r\n        Button fileToInjectButton = new Button(\"Select File\");\r\n        GridPane.setConstraints(fileToInjectButton, 2, 2);\r\n\r\n        Label injectionTypeLabel = new Label(\"Injection Type:\");\r\n        GridPane.setConstraints(injectionTypeLabel, 0, 3);\r\n\r\n        Label mainClassLabel = new Label(\"Main Class:\");\r\n        GridPane.setConstraints(mainClassLabel, 0, 4);\r\n\r\n        mainClassInput = new TextField();\r\n        mainClassInput.setPromptText(\"Enter Main Class\");\r\n        GridPane.setConstraints(mainClassInput, 1, 4);\r\n\r\n        Label mainMethodLabel = new Label(\"Main Method:\");\r\n        GridPane.setConstraints(mainMethodLabel, 0, 5);\r\n\r\n        mainMethodInput = new TextField();\r\n        mainMethodInput.setPromptText(\"Enter Main Method\");\r\n        GridPane.setConstraints(mainMethodInput, 1, 5);\r\n\r\n        settingsGrid.getChildren().addAll(\r\n                inputLabel, inputPathField, inputPathButton,\r\n                outputLabel, outputPathField, outputPathButton,\r\n                fileToInjectLabel, fileToInjectField, fileToInjectButton,\r\n                mainClassLabel, mainClassInput,\r\n                mainMethodLabel, mainMethodInput\r\n        );\r\n\r\n        VBox injectBox = new VBox(10);\r\n        injectBox.setAlignment(Pos.CENTER);\r\n        injectBox.setPadding(new Insets(20, 20, 20, 20));\r\n\r\n        consoleOutput = new TextArea();\r\n        consoleOutput.setEditable(false);\r\n        consoleOutput.setWrapText(true);\r\n        consoleOutput.setPrefHeight(150);\r\n        consoleOutput.setPrefWidth(350);\r\n\r\n        Button injectAction = new Button(\"Inject\");\r\n        injectAction.setOnAction(e -> inject());\r\n\r\n        injectBox.getChildren().addAll(consoleOutput, injectAction);\r\n\r\n        borderPane.setCenter(settingsGrid);\r\n\r\n        settingsButton.setOnAction(e -> borderPane.setCenter(settingsGrid));\r\n        injectButton.setOnAction(e -> borderPane.setCenter(injectBox));\r\n\r\n        inputPathButton.setOnAction(e -> {\r\n            FileChooser fileChooser = new FileChooser();\r\n            fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter(\"Jar Files\", \"*.jar\"));\r\n            inputFile = fileChooser.showOpenDialog(primaryStage);\r\n            if (inputFile != null) {\r\n                inputPathField.setText(inputFile.getAbsolutePath());\r\n            }\r\n        });\r\n\r\n        outputPathButton.setOnAction(e -> {\r\n            FileChooser fileChooser = new FileChooser();\r\n            fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter(\"Jar Files\", \"*.jar\"));\r\n            outputFile = fileChooser.showSaveDialog(primaryStage);\r\n            if (outputFile != null) {\r\n                outputPathField.setText(outputFile.getAbsolutePath());\r\n            }\r\n        });\r\n\r\n        fileToInjectButton.setOnAction(e -> {\r\n            FileChooser fileChooser = new FileChooser();\r\n            fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter(\"Jar Files\", \"*.jar\"));\r\n            fileToInject = fileChooser.showOpenDialog(primaryStage);\r\n            if (fileToInject != null) {\r\n                fileToInjectField.setText(fileToInject.getAbsolutePath());\r\n            }\r\n        });\r\n\r\n        Scene scene = new Scene(borderPane, 600, 500);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    private void inject() {\r\n        if (inputFile == null) {\r\n            log(\"Please select the input file.\");\r\n            return;\r\n        }\r\n\r\n        if (outputFile == null) {\r\n            log(\"Output file is invalid, defaulting to \\\"input path + \\\"-injected\\\"\\\"\");\r\n            outputFile = new File(inputFile.getAbsolutePath().replace(\".jar\", \"-injected.jar\"));\r\n        }\r\n\r\n        if (fileToInject == null) {\r\n            log(\"Please select the file to inject.\");\r\n            return;\r\n        }\r\n\r\n        String output = outputFile.getAbsolutePath();\r\n        String mainClass = mainClassInput.getText();\r\n        String mainMethod = mainMethodInput.getText();\r\n        consoleOutput.clear();\r\n\r\n        if (!inputFile.exists()) {\r\n            log(\"Input file is missing!\");\r\n            return;\r\n        }\r\n\r\n        JarLoader inputJarLoader = new JarLoader();\r\n        boolean mainLoaded = inputJarLoader.loadJar(inputFile);\r\n        if (!mainLoaded) {\r\n            log(\"Error loading the main jar. Please try again!\");\r\n            return;\r\n        } else log(\"Main Jar successfully loaded!\");\r\n\r\n        JarLoader injectionJarLoader = new JarLoader();\r\n        boolean loaded = injectionJarLoader.loadJar(fileToInject);\r\n        if (!loaded) {\r\n            log(\"Error loading the Injection jar. Please try again!\");\r\n            return;\r\n        } else log(\"Injection Jar successfully loaded!\");\r\n\r\n        for (ClassNode classNode : injectionJarLoader.classes) {\r\n            System.out.println(classNode.name);\r\n        }\r\n\r\n        System.out.println(injectionJarLoader.classes.size());\r\n\r\n        JarInjector.inject(mainClass.replace(\".\", \"/\"), mainMethod, inputJarLoader.classes);\r\n        inputJarLoader.classes.addAll(injectionJarLoader.classes);\r\n        inputJarLoader.resources.addAll(injectionJarLoader.resources);\r\n\r\n        inputJarLoader.saveJar(output);\r\n        GUI.log(\"Successfully saved the jar!\");\r\n    }\r\n\r\n    public static void log(String message) {\r\n        Platform.runLater(() -> consoleOutput.appendText(message + \"\\n\"));\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/me/moruto/GUI.java b/src/main/java/me/moruto/GUI.java
--- a/src/main/java/me/moruto/GUI.java	
+++ b/src/main/java/me/moruto/GUI.java	
@@ -21,8 +21,7 @@
     private File inputFile;
     private File outputFile;
     private File fileToInject;
-    private TextField mainClassInput;
-    private TextField mainMethodInput;
+    private TextField injectionMainClassInput;
     private static TextArea consoleOutput;
 
     @Override
@@ -79,29 +78,18 @@
         Button fileToInjectButton = new Button("Select File");
         GridPane.setConstraints(fileToInjectButton, 2, 2);
 
-        Label injectionTypeLabel = new Label("Injection Type:");
-        GridPane.setConstraints(injectionTypeLabel, 0, 3);
-
-        Label mainClassLabel = new Label("Main Class:");
-        GridPane.setConstraints(mainClassLabel, 0, 4);
+        Label injectionMainClassLabel = new Label("Injection Main Class:");
+        GridPane.setConstraints(injectionMainClassLabel, 0, 3);
 
-        mainClassInput = new TextField();
-        mainClassInput.setPromptText("Enter Main Class");
-        GridPane.setConstraints(mainClassInput, 1, 4);
-
-        Label mainMethodLabel = new Label("Main Method:");
-        GridPane.setConstraints(mainMethodLabel, 0, 5);
-
-        mainMethodInput = new TextField();
-        mainMethodInput.setPromptText("Enter Main Method");
-        GridPane.setConstraints(mainMethodInput, 1, 5);
+        injectionMainClassInput = new TextField();
+        injectionMainClassInput.setPromptText("Enter Injection Main Class");
+        GridPane.setConstraints(injectionMainClassInput, 1, 3);
 
         settingsGrid.getChildren().addAll(
                 inputLabel, inputPathField, inputPathButton,
                 outputLabel, outputPathField, outputPathButton,
                 fileToInjectLabel, fileToInjectField, fileToInjectButton,
-                mainClassLabel, mainClassInput,
-                mainMethodLabel, mainMethodInput
+                injectionMainClassLabel, injectionMainClassInput
         );
 
         VBox injectBox = new VBox(10);
@@ -173,8 +161,7 @@
         }
 
         String output = outputFile.getAbsolutePath();
-        String mainClass = mainClassInput.getText();
-        String mainMethod = mainMethodInput.getText();
+        String injectionMainClass = injectionMainClassInput.getText();
         consoleOutput.clear();
 
         if (!inputFile.exists()) {
@@ -196,18 +183,12 @@
             return;
         } else log("Injection Jar successfully loaded!");
 
-        for (ClassNode classNode : injectionJarLoader.classes) {
-            System.out.println(classNode.name);
-        }
-
-        System.out.println(injectionJarLoader.classes.size());
-
-        JarInjector.inject(mainClass.replace(".", "/"), mainMethod, inputJarLoader.classes);
+        JarInjector.inject(injectionMainClass.replace(".", "/"), inputJarLoader.classes);
         inputJarLoader.classes.addAll(injectionJarLoader.classes);
         inputJarLoader.resources.addAll(injectionJarLoader.resources);
 
         inputJarLoader.saveJar(output);
-        GUI.log("Successfully saved the jar!");
+        log("Successfully saved the jar!");
     }
 
     public static void log(String message) {
